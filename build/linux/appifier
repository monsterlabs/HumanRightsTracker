#!/usr/bin/env ruby
require "bundler"
require "fileutils"
Bundler.setup
Bundler.require :default

# Usage: appifier appify Release
class App < Thor
  # Automatically created tar ball from MD
  ORIG_PKG_NAME = "humanrightstracker-0.1"
  PKG_SOURCE_CODE = File.join(File.dirname(__FILE__), "../../#{ORIG_PKG_NAME}.tar.gz")

  VERSION = "1.0.15"
  APP_NAME = "humanrightstracker"
  PKG_NAME = "#{APP_NAME}-#{VERSION}"
  PKG_TARBALL = "#{PKG_NAME}.tar.gz"

  DST_SOURCE_CODE = File.join(File.dirname(__FILE__), PKG_NAME)
  LAUNCHER_SCRIPT = File.join(File.dirname(__FILE__), "lib/HumanRightsTracker/humanrightstracker.in")
  HRTMKFILE = File.join(File.dirname(__FILE__), "lib/HumanRightsTracker/Makefile.am")
  SCHEMA_GENERATOR_PATH = File.join(File.dirname(__FILE__), "lib/SchemaGenerator")
  MKFILE = File.join(File.dirname(__FILE__), "lib/Makefile.am")
  CONFIGURE = File.join(File.dirname(__FILE__), "lib/configure.ac")
  INSTALL = File.join(File.dirname(__FILE__), "lib/INSTALL.txt")

  desc "tarball", "Creates the tarball for linux"
  def tarball 
    clean

    puts "Uncompressing #{PKG_SOURCE_CODE}"
    system "tar xfz #{PKG_SOURCE_CODE}"

    FileUtils.mv ORIG_PKG_NAME, PKG_NAME

    if Dir.exists? PKG_NAME

      FileUtils.copy_file LAUNCHER_SCRIPT, "#{DST_SOURCE_CODE}/HumanRightsTracker/humanrightstracker.in", true, true
      FileUtils.copy_file HRTMKFILE, "#{DST_SOURCE_CODE}/HumanRightsTracker/Makefile.am", true, true
      FileUtils.copy_file MKFILE, "#{DST_SOURCE_CODE}/Makefile.am", true, true
      FileUtils.copy_file CONFIGURE, "#{DST_SOURCE_CODE}/configure.ac", true, true
      FileUtils.copy_file INSTALL, "#{DST_SOURCE_CODE}/INSTALL.txt", true, true
      FileUtils.cp_r SCHEMA_GENERATOR_PATH, "#{DST_SOURCE_CODE}/SchemaGenerator"

      # Replacing version number in autogenerated files
      FileUtils.cd DST_SOURCE_CODE
      %w(AODL/aodl.pc.in AODL.pdf.exporter/aodl.pdf.exporter.pc.in DataBase/database.pc.in 
         Models/models.pc.in MonoSqlite/monosqlite.pc.in Reports/reports.pc.in Views/views.pc.in
        ).each do |file|
        system "sed -i \"s/Version\:\s0\.1/Version\:\s#{VERSION}/g\" #{file}"
      end
      system "sed -i \"s/0\.1/#{VERSION}/g\" configure.ac"

      %w(HumanRightsTracker SchemaGenerator).each do |dir|
        %w(Makefile Makefile.in).each do |file|
          file_path = File.join(dir, file)
          if File.exists? file_path
            FileUtils.rm_rf file_path
          end
        end
      end

      system "rm configure"
      system "automake"
      system "autoconf"
    end

    FileUtils.cd ".."
    puts "Building the tarball #{PKG_TARBALL}"
    system "tar cfz #{PKG_TARBALL} #{PKG_NAME}"
    FileUtils.rm_rf PKG_NAME if Dir.exists? PKG_NAME
  end

  desc "build_pkg", "Builds the package for ubuntu"
  def build_pkg
    unless File.exists? PKG_TARBALL
      tarball
    end

    debian_src_dir = File.join(File.dirname(__FILE__), "lib/debian")
    debian_dir = File.join(APP_NAME, 'debian')
    system "bzr dh-make humanrightstracker #{VERSION} #{PKG_TARBALL}" 

    Dir.glob("#{debian_dir}/*.{ex,EX}").each do |file|
      FileUtils.rm_rf file
    end

    %w(changelog control copyright 
       humanrightstracker.postinst).each do |file|
      FileUtils.copy_file(File.join(debian_src_dir,file),
                          File.join(debian_dir, file))
    end

    FileUtils.cd APP_NAME
    system "debuild -us -uc"
    FileUtils.cd ".."
  end

  desc "clean", "Deletes the tarball for linux"
  def clean
    Dir.glob("humanrightstracker*").each do |file|
      FileUtils.rm_rf file
    end
  end
end

App.start
