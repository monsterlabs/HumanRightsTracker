require "rubygems"
require "bundler"
require "yaml"
require "active_support"
require "active_record"
require "active_record/railtie"
require "active_support"
require "csv"
Bundler.setup
Bundler.require :default

ActiveSupport::Inflector.inflections do |inflect|
  inflect.irregular 'tracking_information', 'tracking_information'
end

Dir.glob("./models/*.rb").each do |model|
  require model
end

task :default => :migrate

desc "Migrate the database through scripts in db/migrate. Target specific version with VERSION=x"
task :migrate => :environment do
  ActiveRecord::Migrator.migrate('migrate', ENV["VERSION"] ? ENV["VERSION"].to_i : nil )
end

desc 'Create a db/schema.rb file that can be portably used against any DB supported by AR'
task :schema => :environment do
  require 'active_record/schema_dumper'
  File.open('schema.rb', "w:utf-8") do |file|
    ActiveRecord::SchemaDumper.dump(ActiveRecord::Base.connection, file)
  end
end

desc "Load seeds in to the database."
task :seeds => :environment do
  User.destroy_all
  CSV.foreach("seeds/users.csv", :col_sep => "|") do |row|
    User.create(:login => row[0].strip,
                :password => row[1].strip,
                :salt => row[2].strip)
  end

  Country.destroy_all
  CSV.foreach("seeds/countries.csv", :col_sep => "|") do |row|
    Country.create(:code => row[0].strip,
                   :name => row[1].strip,
                   :citizen => row[2].strip)
  end

  State.destroy_all
  City.destroy_all
  %w(MX GT HN NI SV CR PA).each do |code|
    @country = Country.find_by_code(code)
    CSV.foreach("seeds/states_#{code.downcase}.csv", :col_sep => "|") do |row|
      State.create(:name => row[0].strip, :country_id => @country.id)
    end

    CSV.foreach("seeds/cities_#{code.downcase}.csv", :col_sep => "|") do |row|
      state = State.find_by_name(row[0].strip)
      City.create(:name => row[1].strip, :state_id => state.id)
    end
  end

  [ MaritalStatus, Religion, EthnicGroup, ScholarityLevel, DateType, CaseStatus, InstitutionType,
    ActStatus, InterventionType, LocationType, VictimStatus, TravelingReason, IdentificationType,
    ReliabilityLevel, Language, TravelCompanion, RelationshipType, AddressType ].each do |class_name|
    class_name.send :destroy_all
    csv_file = ActiveSupport::Inflector.pluralize(class_name.to_s).underscore + '.csv'
    CSV.foreach("seeds/#{csv_file}") do |row|
      class_name.create(:name => row[0].strip)
    end
  end

  [ IndigenousGroup, VictimStatus,  PerpetratorStatus, InstitutionRelationshipType ].each do |class_name|
    class_name.send :destroy_all
    csv_file = ActiveSupport::Inflector.pluralize(class_name.to_s).underscore + '.csv'
    CSV.foreach("seeds/#{csv_file}") do |row|
      class_name.create(:name => row[0].to_s.strip, :notes => row[1].to_s.strip)
    end
  end

  [ Job, PersonRelationshipType, IndigenousLanguage,  InstitutionCategory ].each do |class_name|
    class_name.send :destroy_all
    csv_file = ActiveSupport::Inflector.pluralize(class_name.to_s).underscore + '.csv'
    CSV.foreach("seeds/#{csv_file}", :col_sep => "|") do |row|
      class_name.create(:name => row[0].to_s.strip, :notes => row[1].to_s.strip)
    end
  end

  SourceInformationType.destroy_all
  CSV.foreach("seeds/source_information_types.csv") do |row|
    SourceInformationType.create(:name => row[0].strip, :parent_id  => row[1].to_i)
  end

  HumanRightsViolation.destroy_all 
  HumanRightsViolationCategory.destroy_all  
  require 'spreadsheet'
  Spreadsheet.client_encoding = 'UTF-8'
  book = Spreadsheet.open "seeds/human_rights_violation_categories_and_acts.xls"
  sheet = book.worksheet 0
  total_of_rows = sheet.row_count
  Range.new(1, (total_of_rows -1)).to_a.each do |i|
    row  = sheet.row(i)
    
    affected_right1 = row[0].to_s.sub(/^\"\s/,'').sub(/\s\"$/,'').strip
    affected_right2 = row[1].to_s.sub(/^\"\s/,'').sub(/\s\"$/,'').strip
    affected_right3 = row[2].to_s.sub(/^\"\s/,'').sub(/\s\"$/,'').strip
    affected_right4 = row[3].to_s.sub(/^\"\s/,'').sub(/\s\"$/,'').strip
    affected_right_note = row[4].to_s.sub(/^\"\s/,'').sub(/\s\"$/,'').strip
    @affected_right_parent = nil

    unless affected_right1.empty?
      if HumanRightsViolationCategory.exists?(:name => affected_right1)
        @affected_right_parent = HumanRightsViolationCategory.find_by_name(affected_right1)
      else
        @affected_right_parent = HumanRightsViolationCategory.create(:name => affected_right1, :notes => affected_right_note)
      end
    else
      next
    end
    
    if !affected_right2.empty? and !@affected_right_parent.nil?
      if HumanRightsViolationCategory.exists?(:name => affected_right2, :parent_id => @affected_right_parent.id)
        @affected_right_parent = HumanRightsViolationCategory.where(:name => affected_right2, :parent_id => @affected_right_parent.id).first
      else
        @affected_right_parent = HumanRightsViolationCategory.create(:name => affected_right2, :parent_id => @affected_right_parent.id, :notes => affected_right_note)
      end
    end

    if !affected_right3.empty? and !@affected_right_parent.nil?
      if HumanRightsViolationCategory.exists?(:name => affected_right3, :parent_id => @affected_right_parent.id)
        @affected_right_parent= HumanRightsViolationCategory.where(:name => affected_right3, :parent_id => @affected_right_parent.id).first
      else
        @affected_right_parent= HumanRightsViolationCategory.create(:name => affected_right3, :parent_id => @affected_right_parent.id, :notes => affected_right_note)
      end
    end

    if !affected_right4.empty? and !@affected_right_parent.nil?
      if HumanRightsViolationCategory.exists?(:name => affected_right4, :parent_id => @affected_right_parent.id)
        @affected_right_parent = HumanRightsViolationCategory.where(:name => affected_right4, :parent_id => @affected_right_parent.id).first
      else
        @affected_right_parent = HumanRightsViolationCategory.create(:name => affected_right4, :parent_id => @affected_right_parent.id, :notes => affected_right_note)
      end
    end

    act1 = row[5].to_s.sub(/^\"\s/,'').sub(/\s\"$/,'').strip
    act2 = row[6].to_s.sub(/^\"\s/,'').sub(/\s\"$/,'').strip
    act3 = row[7].to_s.sub(/^\"\s/,'').sub(/\s\"$/,'').strip
    act4 = row[8].to_s.sub(/^\"\s/,'').sub(/\s\"$/,'').strip
    act_notes = row[9].to_s.sub(/^\"\s/,'').sub(/\s\"$/,'').strip
    @act_parent = nil
    
    if !act1.empty? and !@affected_right_parent.nil?
      if HumanRightsViolation.exists?(:name => act1, :category_id => @affected_right_parent.id)
        @act_parent = HumanRightsViolation.where(:name => act1, :category_id => @affected_right_parent.id).first
      else
        @act_parent = HumanRightsViolation.create(:name => act1, :category_id => @affected_right_parent.id, :notes => act_notes)
      end      
    end
    
    if !act2.empty? and !@act_parent.nil?
      if HumanRightsViolation.exists?(:name => act2, :parent_id => @act_parent.id)
        @act_parent = HumanRightsViolation.where(:name => act2, :parent_id => @act_parent.id).first
      else
        @act_parent = HumanRightsViolation.create(:name => act2, :parent_id => @act_parent.id, :notes => act_notes)
      end      
    end

    if !act3.empty? and !@act_parent.nil?
      if HumanRightsViolation.exists?(:name => act3, :parent_id => @act_parent.id)
        @act_parent = HumanRightsViolation.where(:name => act3, :parent_id => @act_parent.id).first
      else
        @act_parent = HumanRightsViolation.create(:name => act3, :parent_id => @act_parent.id, :notes => act_notes)
      end      
    end

    if !act4.empty? and !@act_parent.nil?
      if HumanRightsViolation.exists?(:name => act4, :parent_id => @act_parent.id)
        @act_parent = HumanRightsViolation.where(:name => act4, :parent_id => @act_parent.id).first
      else
        @act_parent = HumanRightsViolation.create(:name => act4, :parent_id => @act_parent.id, :notes => act_notes)
      end      
    end      
  end
  
  AffiliationType.destroy_all
  book = Spreadsheet.open "seeds/affiliation_types.xls"
  sheet = book.worksheet 0
  total_of_rows = sheet.row_count
  Range.new(1, (total_of_rows -1)).to_a.each do |i|
    row  = sheet.row(i)
    
    affiliation_type1 = row[0].to_s.sub(/^\"\s/,'').sub(/\s\"$/,'').strip
    affiliation_type2 = row[1].to_s.sub(/^\"\s/,'').sub(/\s\"$/,'').strip
    affiliation_type_note = row[4].to_s.sub(/^\"\s/,'').sub(/\s\"$/,'').strip
    @affiliation_type_parent = nil

    unless affiliation_type1.empty?
      if AffiliationType.exists?(:name => affiliation_type1)
        @affiliation_type_parent = AffiliationType.find_by_name(affiliation_type1)
      else
        @affiliation_type_parent = AffiliationType.create(:name => affiliation_type1, :notes => affiliation_type_note)
      end
    else
      next
    end
    
    if !affiliation_type2.empty? and !@affiliation_type_parent.nil?
      if AffiliationType.exists?(:name => affiliation_type2, :parent_id => @affiliation_type_parent.id)
        @affiliation_type_parent = AffiliationType.where(:name => affiliation_type2, :parent_id => @affiliation_type_parent.id).first
      else
        @affiliation_type_parent = AffiliationType.create(:name => affiliation_type2, :parent_id => @affiliation_type_parent.id, :notes => affiliation_type_note)
      end
    end
  end


  PerpetratorType.destroy_all
  book = Spreadsheet.open "seeds/perpetrator_types.xls"
  sheet = book.worksheet 0
  total_of_rows = sheet.row_count
  Range.new(1, (total_of_rows -1)).to_a.each do |i|
    row  = sheet.row(i)
    
    perpetrator_type1 = row[0].to_s.sub(/^\"\s/,'').sub(/\s\"$/,'').strip
    perpetrator_type2 = row[1].to_s.sub(/^\"\s/,'').sub(/\s\"$/,'').strip
    perpetrator_type3 = row[2].to_s.sub(/^\"\s/,'').sub(/\s\"$/,'').strip
    perpetrator_type4 = row[3].to_s.sub(/^\"\s/,'').sub(/\s\"$/,'').strip
    perpetrator_type5 = row[4].to_s.sub(/^\"\s/,'').sub(/\s\"$/,'').strip
    perpetrator_type_note = row[5].to_s.sub(/^\"\s/,'').sub(/\s\"$/,'').strip
    @perpetrator_type_parent = nil

    unless perpetrator_type1.empty?
      if PerpetratorType.exists?(:name => perpetrator_type1)
        @perpetrator_type_parent = PerpetratorType.find_by_name(perpetrator_type1)
      else
        @perpetrator_type_parent = PerpetratorType.create(:name => perpetrator_type1, :notes => perpetrator_type_note)
      end
    else
      next
    end
    
    if !perpetrator_type2.empty? and !@perpetrator_type_parent.nil?
      if PerpetratorType.exists?(:name => perpetrator_type2, :parent_id => @perpetrator_type_parent.id)
        @perpetrator_type_parent = PerpetratorType.where(:name => perpetrator_type2, :parent_id => @perpetrator_type_parent.id).first
      else
        @perpetrator_type_parent = PerpetratorType.create(:name => perpetrator_type2, :parent_id => @perpetrator_type_parent.id, :notes => perpetrator_type_note)
      end
    end

    if !perpetrator_type3.empty? and !@perpetrator_type_parent.nil?
      if PerpetratorType.exists?(:name => perpetrator_type3, :parent_id => @perpetrator_type_parent.id)
        @perpetrator_type_parent= PerpetratorType.where(:name => perpetrator_type3, :parent_id => @perpetrator_type_parent.id).first
      else
        @perpetrator_type_parent= PerpetratorType.create(:name => perpetrator_type3, :parent_id => @perpetrator_type_parent.id, :notes => perpetrator_type_note)
      end
    end

    if !perpetrator_type4.empty? and !@perpetrator_type_parent.nil?
      if PerpetratorType.exists?(:name => perpetrator_type4, :parent_id => @perpetrator_type_parent.id)
        @perpetrator_type_parent = PerpetratorType.where(:name => perpetrator_type4, :parent_id => @perpetrator_type_parent.id).first
      else
        @perpetrator_type_parent = PerpetratorType.create(:name => perpetrator_type4, :parent_id => @perpetrator_type_parent.id, :notes => perpetrator_type_note)
      end
    end
    
    if !perpetrator_type5.empty? and !@perpetrator_type_parent.nil?
      if PerpetratorType.exists?(:name => perpetrator_type5, :parent_id => @perpetrator_type_parent.id)
        @perpetrator_type_parent = PerpetratorType.where(:name => perpetrator_type5, :parent_id => @perpetrator_type_parent.id).first
      else
        @perpetrator_type_parent = PerpetratorType.create(:name => perpetrator_type5, :parent_id => @perpetrator_type_parent.id, :notes => perpetrator_type_note)
      end
    end
    
  end  

  ActPlace.destroy_all
  book = Spreadsheet.open "seeds/act_places.xls"
  sheet = book.worksheet 0
  total_of_rows = sheet.row_count
  Range.new(1, (total_of_rows -1)).to_a.each do |i|
    row  = sheet.row(i)

    act_place1 = row[0].to_s.sub(/^\"\s/,'').sub(/\s\"$/,'').strip
    act_place2 = row[1].to_s.sub(/^\"\s/,'').sub(/\s\"$/,'').strip
    act_place3 = row[2].to_s.sub(/^\"\s/,'').sub(/\s\"$/,'').strip
    act_place_note = row[3].to_s.sub(/^\"\s/,'').sub(/\s\"$/,'').strip
    @act_place_parent = nil

    unless act_place1.empty?
      if ActPlace.exists?(:name => act_place1)
        @act_place_parent = ActPlace.find_by_name(act_place1)
      else
        @act_place_parent = ActPlace.create(:name => act_place1, :notes => act_place_note)
      end
    else
      next
    end
    
    if !act_place2.empty? and !@act_place_parent.nil?
      if ActPlace.exists?(:name => act_place2, :parent_id => @act_place_parent.id)
        @act_place_parent = ActPlace.where(:name => act_place2, :parent_id => @act_place_parent.id).first
      else
        @act_place_parent = ActPlace.create(:name => act_place2, :parent_id => @act_place_parent.id, :notes => act_place_note)
      end
    end
    
    if !act_place3.empty? and !@act_place_parent.nil?
      if ActPlace.exists?(:name => act_place3, :parent_id => @act_place_parent.id)
        @act_place_parent = ActPlace.where(:name => act_place3, :parent_id => @act_place_parent.id).first
      else
        @act_place_parent = ActPlace.create(:name => act_place3, :parent_id => @act_place_parent.id, :notes => act_place_note)
      end
    end
  end


  InvolvementDegree.destroy_all
  book = Spreadsheet.open "seeds/involvement_degrees.xls"
  sheet = book.worksheet 0
  total_of_rows = sheet.row_count
  Range.new(1, (total_of_rows -1)).to_a.each do |i|
    row  = sheet.row(i)
    
    involvement_degree1 = row[0].to_s.sub(/^\"\s/,'').sub(/\s\"$/,'').strip
    involvement_degree2 = row[1].to_s.sub(/^\"\s/,'').sub(/\s\"$/,'').strip
    involvement_degree_note = row[2].to_s.sub(/^\"\s/,'').sub(/\s\"$/,'').strip
    @involvement_degree_parent = nil

    unless involvement_degree1.empty?
      if InvolvementDegree.exists?(:name => involvement_degree1)
        @involvement_degree_parent = InvolvementDegree.find_by_name(involvement_degree1)
      else
        @involvement_degree_parent = InvolvementDegree.create(:name => involvement_degree1, :notes => involvement_degree_note)
      end
    else
      next
    end

    if !involvement_degree2.empty? and !@involvement_degree_parent.nil?
      if InvolvementDegree.exists?(:name => involvement_degree2, :parent_id => @involvement_degree_parent.id)
        @involvement_degree_parent = InvolvementDegree.where(:name => involvement_degree2, :parent_id => @involvement_degree_parent.id).first
      else
        @involvement_degree_parent = InvolvementDegree.create(:name => involvement_degree2, :parent_id => @involvement_degree_parent.id, :notes => involvement_degree_note)
      end
    end
  end

  StayType.destroy_all
  book = Spreadsheet.open "seeds/stay_types.xls"
  sheet = book.worksheet 0
  total_of_rows = sheet.row_count
  Range.new(1, (total_of_rows -1)).to_a.each do |i|
    row  = sheet.row(i)
    stay_type_name = row[0].to_s.sub(/^\"\s/,'').sub(/\s\"$/,'').strip
    stay_type_note = row[1].to_s.sub(/^\"\s/,'').sub(/\s\"$/,'').strip
    StayType.create(:name => stay_type_name, :notes => stay_type_note)
  end

end

desc "Load seeds in to the database for demo application."
task :seeds_demo => :environment do
  require "./blueprints/machinist_helper.rb"
  Dir.glob("./blueprints/*.rb").each do |blueprint|
    require blueprint
  end
  
  Person.make!(60)
  Person.find_by_sql("UPDATE people SET is_immigrant = 0 WHERE is_immigrant = 'f'")
  Person.find_by_sql("UPDATE people SET is_immigrant = 1 WHERE is_immigrant = 't'")
  Person.find_by_sql("UPDATE people SET gender = 0 WHERE gender = 'f'")
  Person.find_by_sql("UPDATE people SET gender = 1 WHERE gender = 't'")
  Institution.make!(30)
  InstitutionPerson.make!(10)
  Case.make!(20)
  InformationSource.make!(100)
  DocumentarySource.make!(50)
  CaseRelationship.make!(50)
  PersonRelationship.make!(50)
  InstitutionRelationship.make!(50)
  
  Case.all.each do |c|
    c.record_count = c.tracking_information.count
    c.save
  end  

end

task :environment do
  ActiveRecord::Base.establish_connection(YAML::load(File.open('config/database.yml')))
  ActiveRecord::Base.logger = Logger.new(File.open('database.log', 'a'))
end

